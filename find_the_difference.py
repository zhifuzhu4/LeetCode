"""
389. Find the Difference
You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:
Input: s = "", t = "y"
Output: "y"

Constraints:
0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
"""

import collections


class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        return (set(t) - set(s)).pop()

    def findTheDifference2(self, s: str, t: str) -> str:
        """
        Similar to 136. Single Number
        for any number n
        n ^ 0 = n
        n ^ n = 0
        So… if n is the single number
        n1 ^ n1 ^ n2 ^ n2 … nx ^ nx ^ n
        = (n1^n1) ^ (n2^n2) … (nx^nx) ^ n
        = 0 ^ 0 ^ … ^ 0 ^ n
        = n
        """
        res = 0
        for c in s + t:
            res ^= ord(c)
        return chr(res)

    def findTheDifference3(self, s: str, t: str) -> str:
        """
        Input: s = "abcd", t = "abcde"
        collections.Counter(t) -> Counter({'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1})
        collections.Counter(s) -> Counter({'a': 1, 'b': 1, 'c': 1, 'd': 1})
        (collections.Counter(t) - collections.Counter(s)) -> Counter({'e': 1})
        list((collections.Counter(t) - collections.Counter(s))) -> ['e']
        """
        return list((collections.Counter(t) - collections.Counter(s)))[0]

    def findTheDifference4(self, s: str, t: str) -> str:
        return chr(sum(ord(x) for x in t) - sum(ord(x) for x in s))

    def findTheDifference5(self, s: str, t: str) -> str:
        # note: if d.get(c, 0) == 0, instead of if c not in d:
        # e.g., s = 'a', t = 'aa'
        d = {}
        for c in s:
            d[c] = d.get(c, 0) + 1
        for c in t:
            if d.get(c, 0) == 0:
                return c
            else:
                d[c] -= 1
